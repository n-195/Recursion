To protect people from evil, a long and tall wall was constructed a few years ago. But just a wall is not safe, there should also be soldiers on it, always keeping vigil. The wall is very long and connects the left and the right towers. There are exactly N spots (numbered 1 to N) on the wall for soldiers. The Kth spot is K miles far from the left tower and (N+1-K) miles from the right tower.

Given a permutation of spots P of {1, 2, ..., N}, soldiers occupy the N spots in that order. The P[i]th spot is occupied before the P[i+1]th spot. When a soldier occupies a spot, he is connected to his nearest soldier already placed to his left. If there is no soldier to his left, he is connected to the left tower. The same is the case with right side. A connection between two spots requires a wire of length equal to the distance between the two.

The realm has already purchased a wire of M miles long from Nokia, possibly the wire will be cut into smaller length wires. As we can observe, the total length of the used wire depends on the permutation of the spots P. Help the realm in minimizing the length of the unused wire. If there is not enough wire, output -1.

Example
Input:
4
3 8
3 9
2 4
5 25

Output:
0
0
-1
5

////////////////////////////////////////////////////////////////////////////////////////////

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
    
    
	public static void main (String[] args) throws java.lang.Exception
	{
		// your code goes here
		Scanner sc = new Scanner(System.in);
		int t=sc.nextInt();
		while(t-->0){
		    int n = sc.nextInt();
		    int m = sc.nextInt();
		    int min = min_length(n);
		    int max = max_length(n);
		    if(min<=m && m<=max)
		        System.out.println(0);
		    else if(m>max)
		        System.out.println(m - max);
		    else
		        System.out.println(-1);
		}
	}
	
	static int min_length(int n){
	    if(n==1)
	        return 2;
	    else if(n==2)
	        return 5;
	    else
	        return min_length(n/2) + min_length((n-1)/2) + n + 1;
	}
	
	static int max_length(int n){
        if(n==1)
            return 2;
        return n + 1 + max_length(n - 1);
    }
}
